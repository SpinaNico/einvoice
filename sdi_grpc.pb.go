// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package einvoice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SDIClient is the client API for SDI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SDIClient interface {
	Validate(ctx context.Context, in *Document, opts ...grpc.CallOption) (*Response, error)
}

type sDIClient struct {
	cc grpc.ClientConnInterface
}

func NewSDIClient(cc grpc.ClientConnInterface) SDIClient {
	return &sDIClient{cc}
}

func (c *sDIClient) Validate(ctx context.Context, in *Document, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sdi.SDI/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SDIServer is the server API for SDI service.
// All implementations must embed UnimplementedSDIServer
// for forward compatibility
type SDIServer interface {
	Validate(context.Context, *Document) (*Response, error)
	mustEmbedUnimplementedSDIServer()
}

// UnimplementedSDIServer must be embedded to have forward compatible implementations.
type UnimplementedSDIServer struct {
}

func (*UnimplementedSDIServer) Validate(context.Context, *Document) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (*UnimplementedSDIServer) mustEmbedUnimplementedSDIServer() {}

func RegisterSDIServer(s *grpc.Server, srv SDIServer) {
	s.RegisterService(&_SDI_serviceDesc, srv)
}

func _SDI_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDIServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdi.SDI/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDIServer).Validate(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

var _SDI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sdi.SDI",
	HandlerType: (*SDIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _SDI_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdi.proto",
}
